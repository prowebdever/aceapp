@using AceApp.Data
@model AceApp.Data.PropertyClaimDto;
@{
    ViewData["Title"] = "Property Submission";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="ace-body section">
    <div class="container py-4">
        <div class="row mx-0 mt-0">
            <div class="col-auto ace-btn-back mt-2" onclick="history.back();">
                <b class="">
                    <i class="fa fa-chevron-left" aria-hidden="true"></i>
                </b>
                <span class="ml-2 ace-span ace-black">Claims Portal</span>
            </div>
            <div class="col-md-8 mt-2 d-flex align-items-center">
                <span class="ace-sub-title">ProReview Submission Form</span>
            </div>
        </div>
        <div class="ace-card p-lg-4 p-2 mt-lg-4 mt-2">
            <form asp-action="SavePropertySubmission" enctype="multipart/form-data" asp-controller="Claims" method="POST" data-ajax="true" data-ajax-update="response" data-ajax-begin="onBegin" data-ajax-complete="onComplete" data-ajax-failure="onFailed" data-ajax-success="onClaimSaveSuccess">
                <div id="response"></div>
                <div class="row m-0">
                    <div class="col-12 ace-blue-border">
                        <span>Company</span>
                    </div>
                </div>
                <!-- Company part -->
                <div class="row mt-0">
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.CompanyName, "Company Name")
                            @Html.TextBoxFor(x => x.CompanyName, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Company Name", autocomplete = "off", @readonly="readonly" })
                            @Html.ValidationMessageFor(x => x.CompanyName)
                        </div>
                    </div>
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.Office, "Office")
                            @Html.TextBoxFor(x => x.Office, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Office", autocomplete = "off", @readonly="readonly" })
                            @Html.ValidationMessageFor(x => x.Office)
                        </div>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.AceNo, "ACE #")
                            @Html.TextBoxFor(x => x.AceNo, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "D012A", autocomplete = "off", @readonly="readonly" })
                            @Html.ValidationMessageFor(x => x.AceNo)
                        </div>
                    </div>
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.WorkPhone, "Work Phone")
                            @Html.TextBoxFor(x => x.WorkPhone, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "###-###-####", autocomplete = "off", @readonly="readonly" })
                            @Html.ValidationMessageFor(x => x.WorkPhone)
                        </div>
                    </div>
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.Extension, "Extension")
                            @Html.TextBoxFor(x => x.Extension, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "", autocomplete = "off", @readonly="readonly" })
                            @Html.ValidationMessageFor(x => x.Extension)
                        </div>
                    </div>
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.FaxNumber, "Your Fax Number")
                            @Html.TextBoxFor(x => x.FaxNumber, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "###-###-####", autocomplete = "off", @readonly="readonly" })
                            @Html.ValidationMessageFor(x => x.FaxNumber)
                        </div>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.SubmittedBy, "Submitted by")
                            @Html.TextBoxFor(x => x.SubmittedBy, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "User name", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.SubmittedBy)
                        </div>
                    </div>
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.Email, "Email")
                            @Html.TextBoxFor(x => x.Email, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Email", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.Email)
                        </div>
                    </div>
                </div>

                <!-- Claim part -->
                <div class="row m-0">
                    <div class="col-12 ace-blue-border mt-md-4 mt-2">
                        <span>Claim</span>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.PolicyType, "Policy Type:")
                            @foreach (var policyType in Model.PolicyTypes.Select((value, i) => new { i, value }))
                            {
                                <div class="form-wrap mt-2">
                                    @Html.RadioButtonFor(x=> x.PolicyType, @policyType.i, new {@checked = "checked"})
                                    <label class="ml-2 mb-0">@policyType.value</label>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.DescriptionOfLoss, "Description of Loss")
                            @Html.TextAreaFor(x => x.DescriptionOfLoss, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Description of Loss", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.DescriptionOfLoss)
                        </div>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.ClaimNo, "Claim #")
                            @Html.TextBoxFor(x => x.ClaimNo, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Claim #", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.ClaimNo)
                        </div>
                    </div>
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.PolicyNumber, "Policy Number")
                            @Html.LabelFor(x => x.PolicyNumber, "optional", new { @class="label-optional"})
                            @Html.TextBoxFor(x => x.PolicyNumber, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Policy Number", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.PolicyNumber)
                        </div>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.DayOfLoss, "DOL")
                            @Html.LabelFor(x => x.DayOfLoss, "optional", new { @class="label-optional"})
                            @Html.TextBoxFor(x => x.DayOfLoss, new {@type = "date", @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Date of Loss", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.DayOfLoss)
                        </div>
                    </div>
                </div>
                <!-- Insured Part -->
                <div class="row mt-4">
                    <div class="col-12">
                        <span class="ace-sub-title">Insured</span>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.InsuredLastNameOrBusinessName, "Last Name or Business Name")
                            @Html.TextBoxFor(x => x.InsuredLastNameOrBusinessName, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Last Name", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.InsuredLastNameOrBusinessName)
                        </div>
                    </div>
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.InsuredFirstName, "First Name")
                            @Html.LabelFor(x => x.InsuredFirstName, "optional", new { @class="label-optional"})
                            @Html.TextBoxFor(x => x.InsuredFirstName, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "First Name", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.InsuredFirstName)
                        </div>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-12 mt-3">
                        <div class="form-wrap">
                            <label class="checkbox-inline custom-inline-checkbox-top checkbox-inline-lg">
                                @Html.CheckBoxFor(x => x.InsuredSamePropertyOwner) Insured is the same as Vehicle owner
                            </label>
                        </div>
                    </div>
                </div>
            
                <!-- Property Owner Part -->
                <div class="row mt-4">
                    <div class="col-12">
                        <span class="ace-sub-title">Property Owner</span>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.PropertyOwnerLastNameOrBusinessName, "Last Name or Business Name")
                            @Html.TextBoxFor(x => x.PropertyOwnerLastNameOrBusinessName, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Last Name", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.PropertyOwnerLastNameOrBusinessName)
                        </div>
                    </div>
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.PropertyOwnerFirstName, "First Name")
                            @Html.LabelFor(x => x.PropertyOwnerFirstName, "optional", new { @class="label-optional"})
                            @Html.TextBoxFor(x => x.PropertyOwnerFirstName, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "First Name", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.PropertyOwnerFirstName)
                        </div>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.PropertyOwnerState, "State")
                            <select class="form-control ace-form-input" id="PropertyOwnerState" name="PropertyOwnerState">
                                @for (int i = 0; i < Model.StateNames.Length; i++)
                                {
                                    <option value="@Model.StateValues[i]">@Model.StateNames[i]</option>
                                }
                            </select>
                            @Html.ValidationMessageFor(x => x.PropertyOwnerState)
                        </div>
                    </div>
                    <div class="col-md-3 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.PropertyOwnerZipCode, "ZIP code")
                            @Html.TextBoxFor(x => x.PropertyOwnerZipCode, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "#####", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.PropertyOwnerZipCode)
                        </div>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-12 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.ClaimComments, "Comments")
                            @Html.LabelFor(x => x.ClaimComments, "optional", new { @class="label-optional"})
                            @Html.TextAreaFor(x => x.ClaimComments, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Comments", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.ClaimComments)
                        </div>
                    </div>
                </div>
                <!-- Contact part -->
                <div class="row m-0">
                    <div class="col-12 ace-blue-border mt-md-4 mt-2">
                        <span>Contact</span>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.ContactShopName, "Shop")
                            @Html.TextBoxFor(x => x.ContactShopName, new { @class = "ace-form-input form-control-has-validation form-control-last-child", placeholder = "Name", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.ContactShopName)
                        </div>
                    </div>
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.ContactPhoneNumber, "Phone Number")
                            @Html.TextBoxFor(x => x.ContactPhoneNumber, new { @class = "ace-form-input form-control-has-validation form-control-last-child phone-us", placeholder = "###-###-####", autocomplete = "off" })
                            @Html.ValidationMessageFor(x => x.ContactPhoneNumber)
                        </div>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.IsReachAgreement, "Reach Agreement")
                            <div class="form-wrap mt-2">
                                @Html.RadioButtonFor(x=> x.IsReachAgreement, "true", new {@checked = "checked"})
                                <label class="ml-2 mb-0">Yes</label>
                                @Html.RadioButtonFor(x=> x.IsReachAgreement, "false", new {@class = "ml-5"})
                                <label class="ml-2 mb-0">No</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-0 div_permitted hide">
                    <div class="col-12 mt-3">
                        <div class="form-wrap">
                            @Html.LabelFor(x => x.IsPermittedGatherMoreInfo, "Is ACE permitted to contact the adverse/contractor to gather more information if necessary?")
                            <div class="form-wrap mt-2">
                                @Html.RadioButtonFor(x=> x.IsPermittedGatherMoreInfo, true, new {@checked = "true"})
                                <label class="ml-2 mb-0">Yes</label>
                                @Html.RadioButtonFor(x=> x.IsPermittedGatherMoreInfo, false, new {@class = "ml-5"})
                                <label class="ml-2 mb-0">No</label>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Attached Files -->
                <div class="row">
                    <div class="col-12 mt-3">
                        <div class="form-wrap">
                            <label style="display:block">Attachment files: </label>
                            <label class="ace-gray">To attach a file related to this claim use the browse button and navigate your computer to locate and attach the necessary file.</label>
                        </div>
                    </div>
                </div>
                <div class="row mt-0">
                    <div class="col-12 mt-3 d-flex">
                        <div id="image_shows">
                        </div>
                        <div id="img_upload" class="ace-img-upload">
                            <div class="rounded-circle ace-img-upload-circle p-1"><i class="fa fa-plus fa-2x" aria-hidden="true"></i></div>
                        </div>
                    </div>
                    <input type="file" id="files" name="files" multiple style="position:absolute; opacity: 0; left:-1500px;" accept="image/*" />
                </div>
                <!-- Submit button -->
                <div class="row mt-3">
                    <div class="col-md-6 mt-3">
                        <div class="form-wrap">
                            <button class="btn ace-btn-register btn-block">Submit</button>
                        </div>
                    </div>
                </div>
            </form>
            <input type="file" id="real_file" name="real_file" multiple style="position:absolute; opacity: 0; left:-1000px;" accept="image/*" />
        </div>
    </div>
</section>

@section Scripts {
<script type="text/javascript">
    $(document).ready(function () {

        $('input[type=radio][name=IsReachAgreement]').change(function() {
            if (this.value == 'false') {
                $('.div_permitted').show();
            }else{
                $('.div_permitted').hide();
            }
        });

        $('#img_upload').on('click', function(){
            $("#real_file").click();
        });
        var real_files = new DataTransfer();
        const realFileInput = document.getElementById('files');
        $("#real_file").on("change", function(e) {
            var files = e.target.files;
            
            for (var i = 0; i < files.length; i++) {
                real_files.items.add(files[i]);

                var fileReader = new FileReader();
                fileReader.onload = (function(e) {
                    var imgHtml = `<div class='ace-img-card'><img src='${e.target.result}' title='${e.target.fileName}'/><span class='ace-img-remove'><i class="fa fa-minus-circle fa-2x"></i></span></div>`;
                    $("#image_shows").append(imgHtml);
                });
                fileReader.fileName = files[i].name;
                fileReader.readAsDataURL(files[i]);
            }
            realFileInput.files = real_files.files;
            console.log(real_files);
        });
        $(document).on("click", "#image_shows .ace-img-card .ace-img-remove", function() {
            real_files.items.remove($(this).parent(".ace-img-card").index());
            realFileInput.files = real_files.files;
            $(this).parent(".ace-img-card").remove();
            
        });
    });
</script>
}